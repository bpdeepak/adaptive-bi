#!/usr/bin/env python3
"""
Comprehensive test to verify schema compatibility between data_streaming and Phase 4 models.
"""

import pandas as pd
import numpy as np
import os

def test_schema_mapping():
    """Test the schema mapping from data_streaming to Phase 4 models."""
    print("=== Testing Schema Mapping ===")
    
    # Simulate data exactly as generated by data_streaming/data_generator.py
    print("1. Creating data with data_streaming schema...")
    streaming_data = pd.DataFrame({
        'productId': [f'prod_{i}' for i in range(10)],
        'userId': [f'user_{i%5}' for i in range(10)],
        'transactionId': [f'txn_{i}' for i in range(10)],
        'transactionDate': pd.date_range('2024-01-01', periods=10, freq='D'),
        'totalPrice': np.random.uniform(50, 500, 10),
        'quantity': np.random.randint(1, 5, 10),
        'category': np.random.choice(['Electronics', 'Books', 'Apparel'], 10)
    })
    
    print("Original streaming data columns:", list(streaming_data.columns))
    print("Sample data:")
    print(streaming_data.head(3))
    
    # Apply ModelManager schema transformation
    print("\n2. Applying ModelManager schema transformation...")
    transformed_data = streaming_data.rename(columns={
        'productId': 'product_id',
        'userId': 'user_id',
        'transactionId': 'transaction_id',
        'transactionDate': 'timestamp',
        'totalPrice': 'amount',  # This is the key fix
        'totalAmount': 'amount'  # Keep both mappings for compatibility
    })
    
    print("Transformed data columns:", list(transformed_data.columns))
    print("Sample transformed data:")
    print(transformed_data.head(3))
    
    # Verify required columns for Phase 4 models
    print("\n3. Verifying required columns for Phase 4 models...")
    
    # DynamicPricingModel requirements
    pricing_required = ['product_id', 'user_id', 'amount', 'quantity', 'category', 'timestamp']
    pricing_missing = [col for col in pricing_required if col not in transformed_data.columns]
    print(f"DynamicPricingModel required columns: {pricing_required}")
    print(f"Missing columns: {pricing_missing if pricing_missing else 'None - All present!'}")
    
    # ChurnPredictionModel requirements  
    churn_required = ['user_id', 'product_id', 'transaction_id', 'amount', 'timestamp']
    churn_missing = [col for col in churn_required if col not in transformed_data.columns]
    print(f"ChurnPredictionModel required columns: {churn_required}")
    print(f"Missing columns: {churn_missing if churn_missing else 'None - All present!'}")
    
    # Knowledge Graph requirements
    kg_required = ['user_id', 'product_id', 'amount', 'category']
    kg_missing = [col for col in kg_required if col not in transformed_data.columns]
    print(f"KnowledgeGraph required columns: {kg_required}")
    print(f"Missing columns: {kg_missing if kg_missing else 'None - All present!'}")
    
    success = not (pricing_missing or churn_missing or kg_missing)
    print(f"\n=== Schema Mapping Result: {'SUCCESS' if success else 'FAILED'} ===")
    
    return success, transformed_data

def test_data_types():
    """Test that data types are compatible."""
    print("\n=== Testing Data Types ===")
    
    # Get transformed data
    _, transformed_data = test_schema_mapping()
    
    # Check data types
    print("Data types after transformation:")
    for col, dtype in transformed_data.dtypes.items():
        print(f"  {col}: {dtype}")
    
    # Ensure timestamp is datetime
    if 'timestamp' in transformed_data.columns:
        transformed_data['timestamp'] = pd.to_datetime(transformed_data['timestamp'])
        print("✓ Timestamp converted to datetime")
    
    # Ensure numeric columns are numeric
    numeric_cols = ['amount', 'quantity']
    for col in numeric_cols:
        if col in transformed_data.columns:
            transformed_data[col] = pd.to_numeric(transformed_data[col], errors='coerce')
            print(f"✓ {col} ensured as numeric")
    
    print("Data type verification completed.")
    return transformed_data

if __name__ == "__main__":
    print("Testing schema compatibility between data_streaming and Phase 4 models...\n")
    
    # Test schema mapping
    mapping_success, _ = test_schema_mapping()
    
    # Test data types
    final_data = test_data_types()
    
    print(f"\n=== Final Result ===")
    if mapping_success:
        print("✓ Schema mapping is compatible")
        print("✓ All required columns are present after transformation")
        print("✓ Phase 4 models should be able to train with data_streaming output")
        print("\nWith the schema fixes in ModelManager, Phase 4 models will work correctly!")
    else:
        print("✗ Schema mapping issues detected")
        print("✗ Additional fixes needed")
